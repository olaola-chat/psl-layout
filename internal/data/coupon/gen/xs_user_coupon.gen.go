// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"layout/internal/data/coupon/model"
)

func newXsUserCoupon(db *gorm.DB, opts ...gen.DOOption) xsUserCoupon {
	_xsUserCoupon := xsUserCoupon{}

	_xsUserCoupon.xsUserCouponDo.UseDB(db, opts...)
	_xsUserCoupon.xsUserCouponDo.UseModel(&model.XsUserCoupon{})

	tableName := _xsUserCoupon.xsUserCouponDo.TableName()
	_xsUserCoupon.ALL = field.NewAsterisk(tableName)
	_xsUserCoupon.ID = field.NewUint32(tableName, "id")
	_xsUserCoupon.UID = field.NewUint32(tableName, "uid")
	_xsUserCoupon.CouponID = field.NewUint32(tableName, "coupon_id")
	_xsUserCoupon.Num = field.NewInt32(tableName, "num")
	_xsUserCoupon.ExpireTime = field.NewUint32(tableName, "expire_time")
	_xsUserCoupon.Dateline = field.NewInt64(tableName, "dateline")

	_xsUserCoupon.fillFieldMap()

	return _xsUserCoupon
}

// xsUserCoupon 用户优惠券背包表
type xsUserCoupon struct {
	xsUserCouponDo xsUserCouponDo

	ALL        field.Asterisk
	ID         field.Uint32
	UID        field.Uint32 // 用户UID
	CouponID   field.Uint32 // 优惠券id
	Num        field.Int32  // 数量
	ExpireTime field.Uint32 // 过期时间
	Dateline   field.Int64  // 创建时间

	fieldMap map[string]field.Expr
}

func (x xsUserCoupon) Table(newTableName string) *xsUserCoupon {
	x.xsUserCouponDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xsUserCoupon) As(alias string) *xsUserCoupon {
	x.xsUserCouponDo.DO = *(x.xsUserCouponDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xsUserCoupon) updateTableName(table string) *xsUserCoupon {
	x.ALL = field.NewAsterisk(table)
	x.ID = field.NewUint32(table, "id")
	x.UID = field.NewUint32(table, "uid")
	x.CouponID = field.NewUint32(table, "coupon_id")
	x.Num = field.NewInt32(table, "num")
	x.ExpireTime = field.NewUint32(table, "expire_time")
	x.Dateline = field.NewInt64(table, "dateline")

	x.fillFieldMap()

	return x
}

func (x *xsUserCoupon) WithContext(ctx context.Context) *xsUserCouponDo {
	return x.xsUserCouponDo.WithContext(ctx)
}

func (x xsUserCoupon) TableName() string { return x.xsUserCouponDo.TableName() }

func (x xsUserCoupon) Alias() string { return x.xsUserCouponDo.Alias() }

func (x xsUserCoupon) Columns(cols ...field.Expr) gen.Columns {
	return x.xsUserCouponDo.Columns(cols...)
}

func (x *xsUserCoupon) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xsUserCoupon) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 6)
	x.fieldMap["id"] = x.ID
	x.fieldMap["uid"] = x.UID
	x.fieldMap["coupon_id"] = x.CouponID
	x.fieldMap["num"] = x.Num
	x.fieldMap["expire_time"] = x.ExpireTime
	x.fieldMap["dateline"] = x.Dateline
}

func (x xsUserCoupon) clone(db *gorm.DB) xsUserCoupon {
	x.xsUserCouponDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xsUserCoupon) replaceDB(db *gorm.DB) xsUserCoupon {
	x.xsUserCouponDo.ReplaceDB(db)
	return x
}

type xsUserCouponDo struct{ gen.DO }

func (x xsUserCouponDo) Debug() *xsUserCouponDo {
	return x.withDO(x.DO.Debug())
}

func (x xsUserCouponDo) WithContext(ctx context.Context) *xsUserCouponDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xsUserCouponDo) ReadDB() *xsUserCouponDo {
	return x.Clauses(dbresolver.Read)
}

func (x xsUserCouponDo) WriteDB() *xsUserCouponDo {
	return x.Clauses(dbresolver.Write)
}

func (x xsUserCouponDo) Session(config *gorm.Session) *xsUserCouponDo {
	return x.withDO(x.DO.Session(config))
}

func (x xsUserCouponDo) Clauses(conds ...clause.Expression) *xsUserCouponDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xsUserCouponDo) Returning(value interface{}, columns ...string) *xsUserCouponDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xsUserCouponDo) Not(conds ...gen.Condition) *xsUserCouponDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xsUserCouponDo) Or(conds ...gen.Condition) *xsUserCouponDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xsUserCouponDo) Select(conds ...field.Expr) *xsUserCouponDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xsUserCouponDo) Where(conds ...gen.Condition) *xsUserCouponDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xsUserCouponDo) Order(conds ...field.Expr) *xsUserCouponDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xsUserCouponDo) Distinct(cols ...field.Expr) *xsUserCouponDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xsUserCouponDo) Omit(cols ...field.Expr) *xsUserCouponDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xsUserCouponDo) Join(table schema.Tabler, on ...field.Expr) *xsUserCouponDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xsUserCouponDo) LeftJoin(table schema.Tabler, on ...field.Expr) *xsUserCouponDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xsUserCouponDo) RightJoin(table schema.Tabler, on ...field.Expr) *xsUserCouponDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xsUserCouponDo) Group(cols ...field.Expr) *xsUserCouponDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xsUserCouponDo) Having(conds ...gen.Condition) *xsUserCouponDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xsUserCouponDo) Limit(limit int) *xsUserCouponDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xsUserCouponDo) Offset(offset int) *xsUserCouponDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xsUserCouponDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *xsUserCouponDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xsUserCouponDo) Unscoped() *xsUserCouponDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xsUserCouponDo) Create(values ...*model.XsUserCoupon) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xsUserCouponDo) CreateInBatches(values []*model.XsUserCoupon, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xsUserCouponDo) Save(values ...*model.XsUserCoupon) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xsUserCouponDo) First() (*model.XsUserCoupon, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XsUserCoupon), nil
	}
}

func (x xsUserCouponDo) Take() (*model.XsUserCoupon, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XsUserCoupon), nil
	}
}

func (x xsUserCouponDo) Last() (*model.XsUserCoupon, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XsUserCoupon), nil
	}
}

func (x xsUserCouponDo) Find() ([]*model.XsUserCoupon, error) {
	result, err := x.DO.Find()
	return result.([]*model.XsUserCoupon), err
}

func (x xsUserCouponDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XsUserCoupon, err error) {
	buf := make([]*model.XsUserCoupon, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xsUserCouponDo) FindInBatches(result *[]*model.XsUserCoupon, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xsUserCouponDo) Attrs(attrs ...field.AssignExpr) *xsUserCouponDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xsUserCouponDo) Assign(attrs ...field.AssignExpr) *xsUserCouponDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xsUserCouponDo) Joins(fields ...field.RelationField) *xsUserCouponDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xsUserCouponDo) Preload(fields ...field.RelationField) *xsUserCouponDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xsUserCouponDo) FirstOrInit() (*model.XsUserCoupon, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XsUserCoupon), nil
	}
}

func (x xsUserCouponDo) FirstOrCreate() (*model.XsUserCoupon, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XsUserCoupon), nil
	}
}

func (x xsUserCouponDo) FindByPage(offset int, limit int) (result []*model.XsUserCoupon, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xsUserCouponDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xsUserCouponDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xsUserCouponDo) Delete(models ...*model.XsUserCoupon) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xsUserCouponDo) withDO(do gen.Dao) *xsUserCouponDo {
	x.DO = *do.(*gen.DO)
	return x
}
