// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"layout/internal/data/coupon/model"
)

func newXsUserCouponLog(db *gorm.DB, opts ...gen.DOOption) xsUserCouponLog {
	_xsUserCouponLog := xsUserCouponLog{}

	_xsUserCouponLog.xsUserCouponLogDo.UseDB(db, opts...)
	_xsUserCouponLog.xsUserCouponLogDo.UseModel(&model.XsUserCouponLog{})

	tableName := _xsUserCouponLog.xsUserCouponLogDo.TableName()
	_xsUserCouponLog.ALL = field.NewAsterisk(tableName)
	_xsUserCouponLog.ID = field.NewInt64(tableName, "id")
	_xsUserCouponLog.UID = field.NewUint32(tableName, "uid")
	_xsUserCouponLog.BigareaID = field.NewUint32(tableName, "bigarea_id")
	_xsUserCouponLog.CouponID = field.NewUint32(tableName, "coupon_id")
	_xsUserCouponLog.Num = field.NewInt32(tableName, "num")
	_xsUserCouponLog.Action = field.NewUint32(tableName, "action")
	_xsUserCouponLog.Op = field.NewUint32(tableName, "op")
	_xsUserCouponLog.CouponType = field.NewInt32(tableName, "coupon_type")
	_xsUserCouponLog.Reason = field.NewString(tableName, "reason")
	_xsUserCouponLog.Dateline = field.NewInt64(tableName, "dateline")

	_xsUserCouponLog.fillFieldMap()

	return _xsUserCouponLog
}

// xsUserCouponLog 优惠券消耗记录表
type xsUserCouponLog struct {
	xsUserCouponLogDo xsUserCouponLogDo

	ALL        field.Asterisk
	ID         field.Int64
	UID        field.Uint32 // 用户UID
	BigareaID  field.Uint32 // 用户大区ID
	CouponID   field.Uint32 // 用户游戏优惠券
	Num        field.Int32  // 数量
	Action     field.Uint32 // 1 加， 2 减
	Op         field.Uint32 // 1.下发，2.扣除,3.使用,4.过期,5.兑换,6.新人礼包下发,7.新人礼包过期,8.新人礼包删除
	CouponType field.Int32  // 优惠券类型，1.游戏优惠券
	Reason     field.String // 扩展信息
	Dateline   field.Int64  // 记录时间

	fieldMap map[string]field.Expr
}

func (x xsUserCouponLog) Table(newTableName string) *xsUserCouponLog {
	x.xsUserCouponLogDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xsUserCouponLog) As(alias string) *xsUserCouponLog {
	x.xsUserCouponLogDo.DO = *(x.xsUserCouponLogDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xsUserCouponLog) updateTableName(table string) *xsUserCouponLog {
	x.ALL = field.NewAsterisk(table)
	x.ID = field.NewInt64(table, "id")
	x.UID = field.NewUint32(table, "uid")
	x.BigareaID = field.NewUint32(table, "bigarea_id")
	x.CouponID = field.NewUint32(table, "coupon_id")
	x.Num = field.NewInt32(table, "num")
	x.Action = field.NewUint32(table, "action")
	x.Op = field.NewUint32(table, "op")
	x.CouponType = field.NewInt32(table, "coupon_type")
	x.Reason = field.NewString(table, "reason")
	x.Dateline = field.NewInt64(table, "dateline")

	x.fillFieldMap()

	return x
}

func (x *xsUserCouponLog) WithContext(ctx context.Context) *xsUserCouponLogDo {
	return x.xsUserCouponLogDo.WithContext(ctx)
}

func (x xsUserCouponLog) TableName() string { return x.xsUserCouponLogDo.TableName() }

func (x xsUserCouponLog) Alias() string { return x.xsUserCouponLogDo.Alias() }

func (x xsUserCouponLog) Columns(cols ...field.Expr) gen.Columns {
	return x.xsUserCouponLogDo.Columns(cols...)
}

func (x *xsUserCouponLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xsUserCouponLog) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 10)
	x.fieldMap["id"] = x.ID
	x.fieldMap["uid"] = x.UID
	x.fieldMap["bigarea_id"] = x.BigareaID
	x.fieldMap["coupon_id"] = x.CouponID
	x.fieldMap["num"] = x.Num
	x.fieldMap["action"] = x.Action
	x.fieldMap["op"] = x.Op
	x.fieldMap["coupon_type"] = x.CouponType
	x.fieldMap["reason"] = x.Reason
	x.fieldMap["dateline"] = x.Dateline
}

func (x xsUserCouponLog) clone(db *gorm.DB) xsUserCouponLog {
	x.xsUserCouponLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xsUserCouponLog) replaceDB(db *gorm.DB) xsUserCouponLog {
	x.xsUserCouponLogDo.ReplaceDB(db)
	return x
}

type xsUserCouponLogDo struct{ gen.DO }

func (x xsUserCouponLogDo) Debug() *xsUserCouponLogDo {
	return x.withDO(x.DO.Debug())
}

func (x xsUserCouponLogDo) WithContext(ctx context.Context) *xsUserCouponLogDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xsUserCouponLogDo) ReadDB() *xsUserCouponLogDo {
	return x.Clauses(dbresolver.Read)
}

func (x xsUserCouponLogDo) WriteDB() *xsUserCouponLogDo {
	return x.Clauses(dbresolver.Write)
}

func (x xsUserCouponLogDo) Session(config *gorm.Session) *xsUserCouponLogDo {
	return x.withDO(x.DO.Session(config))
}

func (x xsUserCouponLogDo) Clauses(conds ...clause.Expression) *xsUserCouponLogDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xsUserCouponLogDo) Returning(value interface{}, columns ...string) *xsUserCouponLogDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xsUserCouponLogDo) Not(conds ...gen.Condition) *xsUserCouponLogDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xsUserCouponLogDo) Or(conds ...gen.Condition) *xsUserCouponLogDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xsUserCouponLogDo) Select(conds ...field.Expr) *xsUserCouponLogDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xsUserCouponLogDo) Where(conds ...gen.Condition) *xsUserCouponLogDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xsUserCouponLogDo) Order(conds ...field.Expr) *xsUserCouponLogDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xsUserCouponLogDo) Distinct(cols ...field.Expr) *xsUserCouponLogDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xsUserCouponLogDo) Omit(cols ...field.Expr) *xsUserCouponLogDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xsUserCouponLogDo) Join(table schema.Tabler, on ...field.Expr) *xsUserCouponLogDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xsUserCouponLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *xsUserCouponLogDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xsUserCouponLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *xsUserCouponLogDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xsUserCouponLogDo) Group(cols ...field.Expr) *xsUserCouponLogDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xsUserCouponLogDo) Having(conds ...gen.Condition) *xsUserCouponLogDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xsUserCouponLogDo) Limit(limit int) *xsUserCouponLogDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xsUserCouponLogDo) Offset(offset int) *xsUserCouponLogDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xsUserCouponLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *xsUserCouponLogDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xsUserCouponLogDo) Unscoped() *xsUserCouponLogDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xsUserCouponLogDo) Create(values ...*model.XsUserCouponLog) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xsUserCouponLogDo) CreateInBatches(values []*model.XsUserCouponLog, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xsUserCouponLogDo) Save(values ...*model.XsUserCouponLog) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xsUserCouponLogDo) First() (*model.XsUserCouponLog, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XsUserCouponLog), nil
	}
}

func (x xsUserCouponLogDo) Take() (*model.XsUserCouponLog, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XsUserCouponLog), nil
	}
}

func (x xsUserCouponLogDo) Last() (*model.XsUserCouponLog, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XsUserCouponLog), nil
	}
}

func (x xsUserCouponLogDo) Find() ([]*model.XsUserCouponLog, error) {
	result, err := x.DO.Find()
	return result.([]*model.XsUserCouponLog), err
}

func (x xsUserCouponLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XsUserCouponLog, err error) {
	buf := make([]*model.XsUserCouponLog, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xsUserCouponLogDo) FindInBatches(result *[]*model.XsUserCouponLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xsUserCouponLogDo) Attrs(attrs ...field.AssignExpr) *xsUserCouponLogDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xsUserCouponLogDo) Assign(attrs ...field.AssignExpr) *xsUserCouponLogDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xsUserCouponLogDo) Joins(fields ...field.RelationField) *xsUserCouponLogDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xsUserCouponLogDo) Preload(fields ...field.RelationField) *xsUserCouponLogDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xsUserCouponLogDo) FirstOrInit() (*model.XsUserCouponLog, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XsUserCouponLog), nil
	}
}

func (x xsUserCouponLogDo) FirstOrCreate() (*model.XsUserCouponLog, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XsUserCouponLog), nil
	}
}

func (x xsUserCouponLogDo) FindByPage(offset int, limit int) (result []*model.XsUserCouponLog, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xsUserCouponLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xsUserCouponLogDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xsUserCouponLogDo) Delete(models ...*model.XsUserCouponLog) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xsUserCouponLogDo) withDO(do gen.Dao) *xsUserCouponLogDo {
	x.DO = *do.(*gen.DO)
	return x
}
